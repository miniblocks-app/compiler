name: Build and Release

on:
  workflow_dispatch:
    inputs:
      code_zip_url:
        description: "Firebase link to the ZIP file containing the Flutter app code"
        required: true

jobs:
  fetch-flutter-code:
    name: Fetch Flutter Code
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout so local custom actions exist, but don't remove unzipped code:
      - uses: actions/checkout@v3
        with:
          clean: false

      - name: Download Flutter App Code from Firebase
        run: |
          curl -L "${{ github.event.inputs.code_zip_url }}" -o flutter_app.zip
          echo "Downloaded flutter_app.zip..."
          ls -l flutter_app.zip || true
          file flutter_app.zip || true

      - name: Unzip Flutter App Code
        run: |
          mkdir code
          unzip -o flutter_app.zip -d code
          echo "Unzipped Flutter app to ./code"
          echo "Listing code directory:"
          ls -R code

      - name: Upload Code as Artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: flutter-code
          # Use a wildcard so your local upload action sees all nested files
          path: code/**
          # If your local action supports directories directly, "code/" may also work.
          # But "code/**" is safest for full recursion.

  build-android:
    name: Android Build
    runs-on: ubuntu-latest
    needs: [fetch-flutter-code]
    steps:
      - uses: actions/checkout@v3  # to access local custom actions if needed

      - name: Download Flutter Code
        uses: ./.github/actions/download-artifact
        with:
          name: flutter-code
          path: code

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get Dependencies
        run: cd code && flutter pub get

      - name: Build Android APK (Release)
        run: cd code && flutter build apk --release

      - name: Upload APK Artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: android-apk
          path: code/build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    name: iOS Build
    runs-on: macos-latest
    needs: [fetch-flutter-code]
    steps:
      - uses: actions/checkout@v3

      - name: Download Flutter Code
        uses: ./.github/actions/download-artifact
        with:
          name: flutter-code
          path: code

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get Dependencies
        run: cd code && flutter pub get

      - name: Update Pod repo
        run: cd code/ios && pod repo update

      - name: Build iOS Release (no-codesign)
        run: cd code && flutter build ios --release --no-codesign

      - name: Create Payload folder
        run: mkdir Payload
        working-directory: code/build/ios/iphoneos

      - name: Move Runner.app into Payload
        run: mv Runner.app/ Payload
        working-directory: code/build/ios/iphoneos

      - name: Zip output (IPA)
        run: zip -qq -r -9 FlutterIpaExport.ipa Payload
        working-directory: code/build/ios/iphoneos

      - name: Upload IPA Artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ios-ipa
          path: code/build/ios/iphoneos/FlutterIpaExport.ipa

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    steps:
      - uses: actions/checkout@v3  # If you need local custom actions here

      - name: Download Android APK
        uses: ./.github/actions/download-artifact
        with:
          name: android-apk
          path: artifacts

      - name: Download iOS IPA
        uses: ./.github/actions/download-artifact
        with:
          name: ios-ipa
          path: artifacts

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/*
          file_glob: true
          tag: v1.0
          overwrite: true
          body: "This is the release built exclusively from the ZIP file."

      - name: Notify backend (always)
        if: always()                       # run on success *or* failure
        env:
          WEBHOOK_URL: https://miniblocks-core-234407537699.europe-west1.run.app/api/github
        run: |
          conclusion="${{ job.status }}"   # 'success', 'failure', 'cancelled', …
          cat >payload.json <<EOF
          {
            "action": "completed",
            "workflow_run": {
              "id": ${{ github.run_id }},
              "name": "${{ github.workflow }}",
              "status": "completed",
              "conclusion": "$conclusion",
              "html_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          }
          EOF

          echo "Sending workflow result ($conclusion) to backend…"
          curl --silent --show-error --fail \
               -H "Content-Type: application/json" \
               --data @payload.json \
               "$WEBHOOK_URL"
